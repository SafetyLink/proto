// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authentication/v1/authentication.proto

package authenticationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "https:/github.com/asavor/proto/gen/authentication/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "authentication.v1.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceLoginProcedure is the fully-qualified name of the AuthenticationService's
	// Login RPC.
	AuthenticationServiceLoginProcedure = "/authentication.v1.AuthenticationService/Login"
	// AuthenticationServiceRegisterProcedure is the fully-qualified name of the AuthenticationService's
	// Register RPC.
	AuthenticationServiceRegisterProcedure = "/authentication.v1.AuthenticationService/Register"
)

// AuthenticationServiceClient is a client for the authentication.v1.AuthenticationService service.
type AuthenticationServiceClient interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// authentication.v1.AuthenticationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthenticationServiceLoginProcedure,
			opts...,
		),
		register: connect_go.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthenticationServiceRegisterProcedure,
			opts...,
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	login    *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	register *connect_go.Client[v1.RegisterRequest, v1.RegisterResponse]
}

// Login calls authentication.v1.AuthenticationService.Login.
func (c *authenticationServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls authentication.v1.AuthenticationService.Register.
func (c *authenticationServiceClient) Register(ctx context.Context, req *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the authentication.v1.AuthenticationService
// service.
type AuthenticationServiceHandler interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AuthenticationServiceLoginProcedure, connect_go.NewUnaryHandler(
		AuthenticationServiceLoginProcedure,
		svc.Login,
		opts...,
	))
	mux.Handle(AuthenticationServiceRegisterProcedure, connect_go.NewUnaryHandler(
		AuthenticationServiceRegisterProcedure,
		svc.Register,
		opts...,
	))
	return "/authentication.v1.AuthenticationService/", mux
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.AuthenticationService.Login is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("authentication.v1.AuthenticationService.Register is not implemented"))
}
